# generate by 袁伟 at 2015-03-11 14:56:28

# main context
# # main context
user   nobody;
# # #定义Nginx运行的用户和用户组
worker_processes   auto;
# # #worker_cpu_affinity 0001 0010 0100 1000 0001 0010 0100 1000;
worker_cpu_affinity   auto;
worker_rlimit_nofile   65536;
# # #error_log logs/error.log;
error_log   "/data/logs/nginx_error_log";
pid   /var/run/nginx.pid;

# event context
events {
    accept_mutex   off;
    # # #使用epoll（linux2.6的高性能方式）
    use   epoll;
    # # #每个进程最大连接数（最大连接=连接数x进程数）
    worker_connections   20480;
}
http {
    include   mime.types;
    default_type   text/html;
    # # #默认文件类型
    charset   utf-8;
    # # #日志文件格式
    log_format   scribe 'st:$year-$month-$day $hour:$minute:$second|^|ip:$http_x_forwarded_for|^|status:$status|^|up_addr:$upstream_addr|^|up_status:$upstream_status|^|user: $remote_user|^|request:$request|^|reqbody:$request_body|^|referer:$http_referer|^|ua:$http_user_agent|^|byte:$body_bytes_sent|^|http_x_forwarded_for:$http_x_forwarded_for|^|timeuse:$request_time_msec|^|upstream_response_time:$upstream_response_time|^|request_time:$request_time_msec|^|server_name:$server_name|^|host:$host|^|hostname:$hostname|^|server_protocol:$server_protocol|^|request_method:$request_method|^|request_uri:$request_uri|^|bytes_sent:$bytes_sent|^|gzip_ratio:$gzip_ratio|^|sent_http_tid:$sent_http_tid|^|sent_http_rid:$sent_http_rid|^|sent_http_uid:$sent_http_uid';
    #log_format   scribe2 'st:$year-$month-$day $hour:$minute:$second|^|ip:$remote_addr|^|status:$status|^|up_addr:$upstream_addr|^|up_status:$upstream_status|^|user: $remote_user|^|request:$request|^|reqbody:""|^|referer:$http_referer|^|ua:$http_user_agent|^|byte:$body_bytes_sent|^|forwarded:$http_x_forwarded_for|^|timeuse:$request_time_msec|^|upstream_response_time:$upstream_response_time|^|request_time:$request_time_msec|^|server_name:$server_name|^|host:$host|^|hostname:$hostname|^|server_protocol:$server_protocol|^|request_method:$request_method|^|request_uri:$request_uri|^|bytes_sent:$bytes_sent|^|gzip_ratio:$gzip_ratio|^|sent_http_tid:$sent_http_tid|^|sent_http_rid:$sent_http_rid|^|sent_http_uid:$sent_http_uid';
    log_empty_request   off;
    # # #autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。
    tcp_nopush   on;
    # # #防止网络阻塞
    tcp_nodelay   on;
    # # #输出缓冲区
    output_buffers   4 32k;
    # # #输出拆包大小
    postpone_output   1460;
    client_header_buffer_size   128k;
    # # #缓冲区代理缓冲用户端请求的最大字节数
    large_client_header_buffers   4 256k;
    # # #客户端发送header超时
    client_body_timeout   30;
    # # #发送到客户端超时
    send_timeout   30;
    # # #注意：如果图片显示不正常把这个改成off。
    sendfile   on;
    # # #keepalive_timeout  1;
    keepalive_requests   5000;
    gzip   on;
    # # #开启gzip压缩输出
    gzip_min_length   1k;
    # # #最小压缩文件大小
    gzip_buffers   4 16k;
    # # #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn
    gzip_types   text/plain application/x-javascript text/css application/xml;
    gzip_comp_level   9;
    # # #压缩比率,1 压缩比最小处理速度最快，9 压缩比最大但处理速度最慢（传输快但比较消耗cpu）
    gzip_proxied   any;
    # # #压缩通过代理的所有文件
    gzip_vary   on;
    # # #vary header支持
    trim   off;

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    #lua
	
	#设定全局share内存堆
	lua_shared_dict cachDict 30m;
	lua_shared_dict blackDict 4096m;
	
	#设置dns服务器
	resolver 10.1.1.1;

	#设置lua缓存off,product应该开启
	lua_code_cache on;
		
	# 设置lua模块的require路径
	lua_package_path '/usr/local/nginx/lua/inc/?.lua;/usr/local/nginx/lua/lib/?.lua;/usr/local/nginx/lua/lualib/?.lua;lib/?.lua;lua/?.lua;lua/class/?.lua;lua/db/?.lua;tcp/lib/?.lua;;';
	 
	# 设置lua的c模块的require路径
	lua_package_cpath '/usr/local/nginx/lua/lualib/?.so;lua/lib/?.so;lib/?.so;tcp/lib/?.so;;';

	#执行lua初始化
	init_by_lua_file 'lua/init.lua';

	#加载server配置
	include vhost/server.conf;







    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
